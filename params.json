{
  "name": "UniversalCodeGrep",
  "tagline": "ucg - UniversalCodeGrep",
  "body": "# UniversalCodeGrep\r\n\r\n[![License](https://img.shields.io/badge/License-GPL3-red.svg)](LICENSE)\r\n[![Travis-CI Build Status](https://travis-ci.org/gvansickle/ucg.svg?branch=master)](https://travis-ci.org/gvansickle/ucg)\r\n<a href=\"https://scan.coverity.com/projects/gvansickle-ucg\">\r\n  <img alt=\"Coverity Scan Build Status\"\r\n       src=\"https://scan.coverity.com/projects/7451/badge.svg\"/>\r\n</a>\r\n\r\nUniversalCodeGrep (ucg) is an extremely fast grep-like tool specialized for searching large bodies of source code.\r\n\r\n## Table of Contents\r\n\r\n* [Introduction](#introduction)\r\n  * [Speed](#speed)\r\n    * [Benchmark: '\\#include\\\\s\\+\"\\.\\*\"' on Boost source](#benchmark-includes-on-boost-source)\r\n* [License](#license)\r\n* [Installation](#installation)\r\n  * [Fedora/CentOS Copr Repository](#fedoracentos-copr-repository)\r\n  * [Building the Source Tarball](#building-the-source-tarball)\r\n    * [\\*BSD Note](#bsd-note)\r\n    * [Build Prerequisites](#build-prerequisites)\r\n      * [gcc and g\\+\\+ versions 4\\.8 or greater\\.](#gcc-and-g-versions-48-or-greater)\r\n      * [PCRE: libpcre2\\-8 version 10\\.20 or greater, or libpcre version 8\\.21 or greater\\.](#pcre-libpcre2-8-version-1020-or-greater-or-libpcre-version-821-or-greater)\r\n    * [OS X Prerequisites](#os-x-prerequisites)\r\n  * [Supported OSes and Distributions](#supported-oses-and-distributions)\r\n* [Usage](#usage)\r\n  * [Command Line Options](#command-line-options)\r\n    * [Searching](#searching)\r\n    * [Search Output](#search-output)\r\n    * [File presentation](#file-presentation)\r\n    * [File/directory inclusion/exclusion:](#filedirectory-inclusionexclusion)\r\n    * [File type specification:](#file-type-specification)\r\n    * [Performance Tuning:](#performance-tuning)\r\n    * [Miscellaneous:](#miscellaneous)\r\n    * [Informational options:](#informational-options)\r\n* [Configuration (\\.ucgrc) Files](#configuration-ucgrc-files)\r\n  * [Format](#format)\r\n  * [Location and Read Order](#location-and-read-order)\r\n* [User\\-Defined File Types](#user-defined-file-types)\r\n  * [Extension List Filter](#extension-list-filter)\r\n  * [Literal Filename Filter](#literal-filename-filter)\r\n  * [Glob filter](#glob-filter)\r\n* [Author](#author)\r\n\r\n\r\n## Introduction\r\n\r\nUniversalCodeGrep (`ucg`) is an extremely fast grep-like tool specialized for searching large bodies of source code.  It is intended to be largely command-line compatible with [`Ack`](http://beyondgrep.com/), to some extent with [`ag`](http://geoff.greer.fm/ag/), and where appropriate with `grep`.  Search patterns are specified as PCRE regexes. \r\n\r\n### Speed\r\n`ucg` is intended to address the impatient programmer's code searching needs.  `ucg` is written in C++11 and takes advantage of the concurrency (and other) support of the language to increase scanning speed while reducing reliance on third-party libraries and increasing portability.  Regex scanning is provided by the [PCRE2 library](http://www.pcre.org/), with its [JIT compilation feature](http://www.pcre.org/current/doc/html/pcre2jit.html) providing a huge performance gain on most platforms.  Directory tree traversal is performed by multiple threads, reducing the impact of waiting for I/O completions.  Critical functions are implemented with hand-rolled vectorized (SSE2/4.2/etc.) versions selected at program load-time based on what the system supports, with non-vectorized fallbacks.  \r\n\r\nAs a consequence of its overall design for maximum concurrency and speed, `ucg` is extremely fast.  As an example, under Fedora 24, one of the benchmarks in the test suite which scans the Boost 1.58.0 source tree with `ucg` and a selection of similar utilities yields the following results:\r\n\r\n#### Benchmark: '#include\\s+\".*\"' on Boost source\r\n\r\n| Command | Program Version | Elapsed Real Time, Average of 10 Runs | Num Matched Lines | Num Diff Chars |\r\n|---------|-----------------|---------------------------------------|-------------------|----------------|\r\n| `ucg --noenv --cpp '#include\\s+.*' ~/src/boost_1_58_0` | 0.3.0 | 0.212767 | 9511 | 189 |\r\n| `/usr/bin/ucg --noenv --cpp '#include\\s+.*' ~/src/boost_1_58_0` | 0.2.2 | 0.262368 | 9511 | 189 |\r\n| `/usr/bin/rg -n -t cpp '#include\\s+.*' ~/src/boost_1_58_0` | 0.2.3 | 0.262967 | 9509 | 0 |\r\n| `grep -Ern --color --include=\\*.cpp --include=\\*.hpp --include=\\*.h --include=\\*.cc --include=\\*.cxx '#include\\s+.*' ~/src/boost_1_58_0` | grep (GNU grep) 2.25 | 0.366634 | 9509 | 0 |\r\n| `/usr/bin/pcre2grep -rn --color '--exclude=^.*(?<!\\.cpp|\\.hpp|\\.h|\\.cc|\\.cxx)$' '#include\\s+.*' ~/src/boost_1_58_0` | 10.21 2016-01-12 | 0.818627 | 9527 | 1386 |\r\n| `/usr/bin/ag  --cpp '#include\\s+.*' ~/src/boost_1_58_0` | 0.32.0 | 1.90161 | 9511 | 189 |\r\n\r\nNote that UniversalCodeGrep is in fact somewhat faster than `grep` itself, even when `grep` is only using [Extended Regular Expressions](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_04).  And `ucg` certainly wins the ease-of-use contest.\r\n\r\n## License\r\n\r\n[GPL (Version 3 only)](https://github.com/gvansickle/ucg/blob/master/COPYING)\r\n\r\n## Installation\r\n\r\nUniversalCodeGrep binaries are currently available for Fedora 23/24/25/rawhide and Centos 7.  Binaries for other platforms (Ubuntu, Arch, openSUSE) are coming soon.\r\n\r\n<!-- COMING SOON\r\n### Ubuntu PPA\r\n\r\nIf you are a Ubuntu user, the easiest way to install UniversalCodeGrep is from the Launchpad PPA [here](https://launchpad.net/~grvs/+archive/ubuntu/ucg).  To install from the command line:\r\n\r\n```sh\r\n# Add the PPA to your system:\r\nsudo add-apt-repository ppa:grvs/ucg\r\n# Pull down the latest lists of software from all archives:\r\nsudo apt-get update\r\n# Install ucg:\r\nsudo apt-get install universalcodegrep\r\n```\r\n-->\r\n\r\n### Fedora/CentOS Copr Repository\r\n\r\nIf you are a Fedora or CentOS user, the easiest way to install UniversalCodeGrep is from the Fedora Copr-hosted dnf/yum repository [here](https://copr.fedoraproject.org/coprs/grvs/UniversalCodeGrep).  Installation is as simple as:\r\n\r\n```sh\r\n# Add the Copr repo to your system:\r\nsudo dnf copr enable grvs/UniversalCodeGrep\r\n# Install UniversalCodeGrep:\r\nsudo dnf install universalcodegrep\r\n```\r\n\r\n<!-- COMING SOON\r\n\r\n### Arch Linux User Repository\r\n\r\nIf you are a Arch Linux user, the easiest way to install UniversalCodeGrep is from the Arch Linux User Repository (AUR) [here](https://aur.archlinux.org/packages/ucg/).  Installation is as simple as:\r\n\r\n```sh\r\n# Install using yaourt:\r\nyaourt -S ucg\r\n# Install manually:\r\ncd /tmp/\r\ncurl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/ucg.tar.gz\r\ntar -xvf ucg.tar.gz\r\ncd ycg\r\nmakepkg -sri\r\n```\r\n\r\n### openSUSE Binary RPMs\r\n\r\nBinary RPMs for openSUSE are available [here](https://github.com/gvansickle/ucg/releases/tag/0.3.0).\r\n\r\n-->\r\n\r\n### Building the Source Tarball\r\n\r\nUniversalCodeGrep can be built and installed from the distribution tarball (available [here](https://github.com/gvansickle/ucg/releases/download/0.3.0/universalcodegrep-0.3.0.tar.gz)) in the standard autotools manner:\r\n\r\n```sh\r\ntar -xaf universalcodegrep-0.3.0.tar.gz\r\ncd universalcodegrep-0.3.0.tar.gz\r\n./configure\r\nmake\r\nmake install\r\n```\r\n\r\nThis will install the `ucg` executable in `/usr/local/bin`.  If you wish to install it elsewhere or don't have permissions on `/usr/local/bin`, specify an installation prefix on the `./configure` command line:\r\n\r\n```sh\r\n./configure --prefix=~/<install-root-dir>\r\n```\r\n\r\n> #### *BSD Note\r\n>\r\n> On at least PC-BSD 10.3, g++48 can't find its own libstdc++ without a little help.  Configure the package like this:\r\n> ```sh\r\n> ./configure LDFLAGS='-Wl,-rpath=/usr/local/lib/gcc48'\r\n> ```\r\n\r\n#### Build Prerequisites\r\n\r\n##### `gcc` and `g++` versions 4.8 or greater.\r\n\r\nVersions of `gcc` prior to 4.8 do not have sufficiently complete C++11 support to build `ucg`.  `clang`/`clang++` is also known to work, but is not the primary development compiler.\r\n\r\n##### PCRE: `libpcre2-8` version 10.20 or greater, or `libpcre` version 8.21 or greater.\r\n\r\nOne or both of these should be available from your Linux/OS X/*BSD distro's package manager. You'll need the `-devel` versions if they're separate.  Prefer `libpcre2-8`; while `ucg` will currently work with either PCRE2 or PCRE, you'll get better performance with PCRE2.\r\n\r\n> #### OS X Prerequisites\r\n>\r\n> OS X additionally requires the installation of `argp-standalone`, which is normally part of the `glibc` library on Linux systems.  This can\r\n> be installed along with a pcre library from Homebrew:\r\n> ```sh\r\n> $ brew update\r\n> $ brew install pcre argp-standalone\r\n> ```  \r\n\r\n### Supported OSes and Distributions\r\n\r\nUniversalCodeGrep 0.3.0 should build and run anywhere the prerequisites are available.  It has been built and tested on the following OSes/distros:\r\n\r\n- Linux\r\n  - Fedora 22, 23, 24, rawhide\r\n  - CentOS 7\r\n  - Ubuntu 16.04 (Xenial), 15.04, 14.04 (Trusty Tahr)\r\n- Windows 7 + Cygwin 64-bit\r\n- OS X\r\n  - Xcode 8gm/OS X 10.11\r\n  - Xcode 7.1.1 GM/OSX 10.10\r\n  - Xcode 6.1/OS X 10.9\r\n- PC-BSD 10.3\r\n\r\nNote that at this time, only x86-64/amd64 architectures are supported.\r\n\r\n## Usage\r\n\r\nInvoking `ucg` is the same as with `ack` or `ag`:\r\n\r\n```sh\r\nucg [OPTION...] PATTERN [FILES OR DIRECTORIES]\r\n```\r\n\r\n...where `PATTERN` is an PCRE-compatible regular expression.\r\n\r\nIf no `FILES OR DIRECTORIES` are specified, searching starts in the current directory.\r\n\r\n### Command Line Options\r\n\r\nVersion 0.3.0 of `ucg` supports a significant subset of the options supported by `ack`.  In general, options specified later\r\non the command line override options specified earlier on the command line.\r\n\r\n#### Searching\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `--[no]smart-case`   | Ignore case if PATTERN is all lowercase (default: enabled). |\r\n| `-i, --ignore-case`  | Ignore case distinctions in PATTERN.                        |\r\n| `-Q, --literal`      | Treat all characters in PATTERN as literal.                 |\r\n| `-w, --word-regexp`  | PATTERN must match a complete word.                         |\r\n\r\n####  Search Output\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `--column`   | Print column of first match after line number. |\r\n| `--nocolumn` | Don't print column of first match (default).   |\r\n\r\n#### File presentation\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `--color, --colour`     | Render the output with ANSI color codes.    |\r\n| `--nocolor, --nocolour` | Render the output without ANSI color codes. |\r\n\r\n#### File/directory inclusion/exclusion:\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `--[no]ignore-dir=name, --[no]ignore-directory=name`     | [Do not] exclude directories with this name.        |\r\n| `--exclude=GLOB, --ignore=GLOB` | Files matching GLOB will be ignored. |\r\n| `--ignore-file=FILTER:FILTERARGS` |  Files matching FILTER:FILTERARGS (e.g. ext:txt,cpp) will be ignored. |\r\n| `--include=GLOB`                       | Only files matching GLOB will be searched. |\r\n| `-k, --known-types`                              | Only search in files of recognized types (default: on). |\r\n| `-n, --no-recurse`                               | Do not recurse into subdirectories.        |\r\n| `-r, -R, --recurse`                              | Recurse into subdirectories (default: on). |\r\n| `--type=[no]TYPE`                                | Include only [exclude all] TYPE files.  Types may also be specified as `--[no]TYPE`: e.g., `--cpp` is equivalent to `--type=cpp`.  May be specified multiple times. |\r\n\r\n#### File type specification:\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `--type-add=TYPE:FILTER:FILTERARGS` | Files FILTERed with the given FILTERARGS are treated as belonging to type TYPE.  Any existing definition of type TYPE is appended to. |\r\n| `--type-del=TYPE`                   | Remove any existing definition of type TYPE. |\r\n| `--type-set=TYPE:FILTER:FILTERARGS` | Files FILTERed with the given FILTERARGS are treated as belonging to type TYPE.  Any existing definition of type TYPE is replaced. |\r\n\r\n#### Performance Tuning:\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `--dirjobs=NUM_JOBS`   |  Number of directory traversal jobs (std::thread<>s) to use.  Default is 2. |\r\n| `-j, --jobs=NUM_JOBS`       | Number of scanner jobs (std::thread<>s) to use.  Default is the number of cores on the system. |\r\n\r\n#### Miscellaneous:\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `--noenv`         | Ignore .ucgrc files.                            |\r\n\r\n#### Informational options:\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `-?, --help`                      | give this help list                 |\r\n| `--help-types, --list-file-types` | Print list of supported file types. |\r\n| `--usage`                         | give a short usage message          |\r\n| `-V, --version`                   | print program version               |\r\n\r\n## Configuration (.ucgrc) Files\r\n\r\nUniversalCodeGrep supports configuration files with the name `.ucgrc`, in which command-line options can be stored on a per-user and per-directory-hierarchy basis.\r\n\r\n### Format\r\n\r\n`.ucgrc` files are text files with a simple format.  Each line of text can be either:\r\n\r\n1. A single-line comment.  The line must start with a `#` and the comment continues for the rest of the line.\r\n2. A command-line parameter.  This must be exactly as if it was given on the command line.\r\n\r\n### Location and Read Order\r\n\r\nWhen `ucg` is invoked, it looks for command-line options from the following locations in the following order:\r\n\r\n1. The `.ucgrc` file in the user's `$HOME` directory, if any.\r\n2. The first `.ucgrc` file found, if any, by walking up the component directories of the current working directory.  This traversal stops at either the user's `$HOME` directory or the root directory.  This is called the project config file, and is intended to live in the top-level directory of a project directory hierarchy.\r\n3. The command line itself.\r\n\r\nOptions read later will override earlier options.\r\n\r\n## User-Defined File Types\r\n\r\n`ucg` supports user-defined file types with the `--type-set=TYPE:FILTER:FILTERARGS` and `--type-add=TYPE:FILTER:FILTERARGS` command-line options.  Three FILTERs are currently supported, `ext` (extension list), `is` (literal filename), and `glob` (glob pattern).\r\n\r\n### Extension List Filter\r\n\r\nThe extension list filter allows you to specify a comma-separated list of file extensions which are to be considered as belonging to file type TYPE.\r\nExample:\r\n`--type-set=type1:ext:abc,xqz,def`\r\n\r\n### Literal Filename Filter\r\n\r\nThe literal filename filter simply specifies a single literal filename which is to be considered as belonging to file type TYPE.\r\nExample:\r\n`--type-add=autoconf:is:configure.ac`\r\n\r\n### Glob filter\r\n\r\nThe glob filter allows you to specify a glob pattern to match against filenames.  If the glob matches, the file is considered as belonging to the file type TYPE.\r\nExample:\r\n`--type-set=mk:glob:?akefile*`\r\n\r\n## Author\r\n\r\n[Gary R. Van Sickle](https://github.com/gvansickle)\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}