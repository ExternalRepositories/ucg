{"name":"UniversalCodeGrep","tagline":"ucg - UniversalCodeGrep","body":"# UniversalCodeGrep\r\n\r\nUniversalCodeGrep (ucg) is another [Ack](http://beyondgrep.com/) clone.  It is an extremely fast grep-like tool specialized for searching large bodies of source code.\r\n\r\n## Table of Contents\r\n\r\n  * [UniversalCodeGrep](#universalcodegrep)\r\n    * [Table of Contents](#table-of-contents)\r\n    * [Introduction](#introduction)\r\n      * [Speed](#speed)\r\n    * [License](#license)\r\n    * [Installation](#installation)\r\n      * [Binary RPMs](#binary-rpms)\r\n      * [Building the Source Tarball](#building-the-source-tarball)\r\n      * [Prerequisites](#prerequisites)\r\n        * [gcc version 4.8 or greater.](#gcc-version-48-or-greater)\r\n        * [pcre version 8.2 or greater.](#pcre-version-82-or-greater)\r\n      * [Supported OSes and Distributions](#supported-oses-and-distributions)\r\n    * [Usage](#usage)\r\n      * [Command Line Options](#command-line-options)\r\n        * [Searching](#searching)\r\n        * [File presentation](#file-presentation)\r\n        * [File inclusion/exclusion:](#file-inclusionexclusion)\r\n        * [File type specification:](#file-type-specification)\r\n        * [Miscellaneous:](#miscellaneous)\r\n        * [Informational options:](#informational-options)\r\n    * [Configuration (.ucgrc) Files](#configuration-ucgrc-files)\r\n      * [Format](#format)\r\n      * [Location and Read Order](#location-and-read-order)\r\n    * [User-Defined File Types](#user-defined-file-types)\r\n      * [Extension List Filter](#extension-list-filter)\r\n      * [Literal Filename Filter](#literal-filename-filter)\r\n    * [Author](#author)\r\n\r\n\r\n## Introduction\r\n\r\nUniversalCodeGrep (ucg) is an extremely fast grep-like tool specialized for searching large bodies of source code.  It is intended to be largely command-line compatible with [Ack](http://beyondgrep.com/), to some extent with [`ag`](http://geoff.greer.fm/ag/), and where appropriate with `grep`.  Search patterns are specified as PCRE regexes. \r\n\r\n### Speed\r\n`ucg` is intended to address the impatient programmer's code searching needs.  `ucg` is written in C++11 and takes advantage of the concurrency (and other) support of the language to increase scanning speed while reducing reliance on third-party libraries and increasing portability.  Regex scanning is provided by the [PCRE library](http://www.pcre.org/), with its [JIT compilation feature](http://www.pcre.org/original/doc/html/pcrejit.html) providing a huge performance gain on most platforms.\r\n\r\nAs a consequence of its use of these facilities and its overall design for maximum concurrency and speed, `ucg` is extremely fast.  Under Fedora 23, scanning the Boost 1.58.0 source tree with `ucg` 0.2.0, [`ag`](http://geoff.greer.fm/ag/) 0.30.0, and `ack` 2.14 produces the following results:\r\n\r\n| Command | Approximate Real Time |\r\n|---------|-----------------------|\r\n| `time ucg 'BOOST.*HPP' ~/src/boost_1_58_0` | ~ 0.53 seconds |\r\n| `time ag 'BOOST.*HPP' ~/src/boost_1_58_0` | ~ 11.1 seconds |\r\n| `time ack 'BOOST.*HPP' ~/src/boost_1_58_0` | ~ 18.3 seconds |\r\n\r\n## License\r\n\r\n[GPL (Version 3 only)](https://github.com/gvansickle/ucg/blob/master/COPYING)\r\n\r\n## Installation\r\n\r\n### Binary RPMs\r\n\r\nBinary RPMs for a number of recent Linux distros are available [here](https://github.com/gvansickle/ucg/releases/latest).  Note that when installing via `zypper`, `yum`, `dnf`, or whatever's appropriate for your system, you will probably get the same sort of security warnings you get if you install Google Chrome from its RPM.\r\n\r\n### Building the Source Tarball\r\n\r\nUniversalCodeGrep installs from the distribution tarball (available [here](https://github.com/gvansickle/ucg/releases/download/0.2.0/universalcodegrep-0.2.0.tar.gz)) in the standard autotools manner:\r\n\r\n```sh\r\ntar -xaf universalcodegrep-0.2.0.tar.gz\r\ncd universalcodegrep-0.2.0.tar.gz\r\n./configure\r\nmake\r\nmake install\r\n```\r\n\r\nThis will install the `ucg` executable in `/usr/local/bin`.  If you wish to install it elsewhere or don't have permissions on `/usr/local/bin`, specify an installation prefix on the `./configure` command line:\r\n\r\n```sh\r\n./configure --prefix=~/<install-root-dir>\r\n```\r\n\r\n### Prerequisites\r\n\r\n#### `gcc` version 4.8 or greater.\r\n\r\nVersions of `gcc` prior to 4.8 do not have sufficiently complete C++11 support to build `ucg`.\r\n\r\n#### `pcre` version 8.2 or greater.\r\n\r\nThis should be available from your Linux distro.\r\n\r\n### Supported OSes and Distributions\r\n\r\nUniversalCodeGrep should build and function anywhere the prerequisites are available.  It has been built and tested on the following OSes/distros:\r\n\r\n- Linux\r\n  - Ubuntu 15.04\r\n  - CentOS 7\r\n  - Fedora 22\r\n  - Fedora 23\r\n  - RHEL 7\r\n  - SLE 12\r\n  - openSUSE 13.2\r\n  - openSUSE Leap 42.1\r\n- Windows 7 + Cygwin 64-bit (Note however that speed here is comparable to `ag`)\r\n\r\n## Usage\r\n\r\nInvoking `ucg` is the same as with `ack` or `ag`:\r\n\r\n```sh\r\nucg [OPTION...] PATTERN [FILES OR DIRECTORIES]\r\n```\r\n\r\n...where `PATTERN` is an PCRE-compatible regular expression.\r\n\r\nIf no `FILES OR DIRECTORIES` are specified, searching starts in the current directory.\r\n\r\n### Command Line Options\r\n\r\nVersion 0.2.0 of `ucg` supports a significant subset of the options supported by `ack`.  Future releases will have support for more options.\r\n\r\n#### Searching\r\n\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `-i, --ignore-case`  |      Ignore case distinctions in PATTERN        |\r\n| `-Q, --literal`      |     Treat all characters in PATTERN as literal. |\r\n| `-w, --word-regexp`  |      PATTERN must match a complete word.        |\r\n\r\n#### File presentation\r\n\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `--color, --colour`     | Render the output with ANSI color codes.    |\r\n| `--nocolor, --nocolour` | Render the output without ANSI color codes. |\r\n\r\n#### File inclusion/exclusion:\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `--ignore-dir=name, --ignore-directory=name`     | Exclude directories with this name.        |\r\n| `--noignore-dir=name, --noignore-directory=name` | Do not exclude directories with this name. |\r\n| `-n, --no-recurse`                               | Do not recurse into subdirectories.        |\r\n| `-r, -R, --recurse`                              | Recurse into subdirectories (default: on). |\r\n| `--type=[no]TYPE`                                | Include only [exclude all] TYPE files.  Types may also be specified as `--[no]TYPE`.     |\r\n\r\n#### File type specification:\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `--type-add=TYPE:FILTER:FILTERARGS` | Files FILTERed with the given FILTERARGS are treated as belonging to type TYPE.  Any existing definition of type TYPE is appended to. |\r\n| `--type-del=TYPE`                   | Remove any existing definition of type TYPE. |\r\n| `--type-set=TYPE:FILTER:FILTERARGS` | Files FILTERed with the given FILTERARGS are treated as belonging to type TYPE.  Any existing definition of type TYPE is replaced. |\r\n\r\n#### Miscellaneous:\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `-j, --jobs=NUM_JOBS` | Number of scanner jobs (std::thread<>s) to use. |\r\n| `--noenv`             | Ignore .ucgrc files.                            |\r\n\r\n#### Informational options:\r\n| Option | Description |\r\n|----------------------|------------------------------------------|\r\n| `-?, --help`                      | give this help list                 |\r\n| `--help-types, --list-file-types` | Print list of supported file types. |\r\n| `--usage`                         | give a short usage message          |\r\n| `-V, --version`                   | print program version               |\r\n\r\n## Configuration (.ucgrc) Files\r\n\r\nUniversalCodeGrep supports configuration files with the name `.ucgrc`, in which command-line options can be stored on a per-user and per-directory-hierarchy basis.\r\n\r\n### Format\r\n\r\n`.ucgrc` files are text files with a simple format.  Each line of text can be either:\r\n\r\n1. A single-line comment.  The line must start with a `#` and the comment continues for the rest of the line.\r\n2. A command-line parameter.  This must be exactly as if it was given on the command line.\r\n\r\n### Location and Read Order\r\n\r\nWhen `ucg` is invoked, it looks for command-line options from the following locations in the following order:\r\n\r\n1. The `.ucgrc` file in the user's `$HOME` directory, if any.\r\n2. The first `.ucgrc` file found, if any, by walking up the component directories of the current working directory.  This traversal stops at either the user's `$HOME` directory or the root directory.  This is called the project config file, and is intended to live in the top-level directory of a project directory hierarchy.\r\n3. The command line itself.\r\n\r\nOptions read later will override earlier options.\r\n\r\n## User-Defined File Types\r\n\r\n`ucg` supports user-defined file types with the `--type-set=TYPE:FILTER:FILTERARGS` and `--type-add=TYPE:FILTER:FILTERARGS` command-line options.  Only two FILTERs are currently supported, `ext` (extension list) and `is` (literal filename).\r\n\r\n### Extension List Filter\r\n\r\nThe extension list filter allows you to specify a comma-separated list of file extensions which are to be considered as belonging to file type TYPE.\r\nExample:\r\n`--type-set=type1:ext:abc,xqz,def`\r\n\r\n### Literal Filename Filter\r\n\r\nThe literal filename filter simply specifies a single literal filename which is to be considered as belonging to file type TYPE.\r\nExample:\r\n`--type-add=autoconf:is:configure.ac`\r\n\r\n## Author\r\n\r\nGary R. Van Sickle\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}