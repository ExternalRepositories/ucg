# @configure_input@                                     -*- shell-script -*-
# atlocal.in for UniversalCodeGrep's ./tests directory, used to collect configure-time
# information about the build system.
#
# Copyright 2015-2016 Gary R. Van Sickle (grvs@users.sourceforge.net).
#
# This file is part of UniversalCodeGrep.
#
# UniversalCodeGrep is free software: you can redistribute it and/or modify it under the
# terms of version 3 of the GNU General Public License as published by the Free
# Software Foundation.
#
# UniversalCodeGrep is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# UniversalCodeGrep.  If not, see <http://www.gnu.org/licenses/>.

## Process this file with autoconf to produce atlocal.

# We need this so we're able to find the binary we built.
PATH=@abs_builddir@:@abs_top_builddir@/src:@abs_top_srcdir@/build-aux:$top_srcdir:$srcdir:$PATH

XFAILFILE=$abs_builddir/.badversion

trap "test -r $XFAILFILE && cat $XFAILFILE; exit $?" 1 2 13 15

# At testsuite-time, find the programs we wish to compare performance with.
PERF_PROGRAMS_TO_COMPARE=ucg
if PROG_AG="$(which ag)";
then
	PERF_PROGRAMS_TO_COMPARE=$PERF_PROGRAMS_TO_COMPARE" "$PROG_AG;
fi
#if PROG_ACK="$(which ack)";
#then
#	PERF_PROGRAMS_TO_COMPARE=$PERF_PROGRAMS_TO_COMPARE" "$PROG_ACK;
#fi

# Paths to source that we'll test against.
# @todo Maybe take this in as a parameter?  The only issue is that this doesn't work during a "make distcheck",
# which arguably is not a big deal.
BOOST_PATH=${abs_top_srcdir}/../boost_1_58_0
# We generate this one.
TEST_FILE_NAME_LARGE_FILE_1="${abs_top_builddir}/tests/500MBLoremIpsum.cpp"

# The file where we'll put the results of the performance tests.
# This file will be created by testsuite.at.
PERF_RESULTS_FILE=${abs_top_builddir}/tests/perf_test_results.txt

PROG_SCRIPT="@PROG_SCRIPT@"
PROG_SCRIPT_TYPE="@PROG_SCRIPT_TYPE@"
PROG_SCRIPT_PRE_TEXT="@PROG_SCRIPT_PRE_TEXT@"
PROG_SCRIPT_POST_TEXT="@PROG_SCRIPT_POST_TEXT@"
export SED="@SED@"
export ESED="@ESED@"
export MKDIR_P="@MKDIR_P@"
export TEST_LN_S="@TEST_LN_S@"
export PROG_TIME="@PROG_TIME@"
export FGREP="@FGREP@"
export EGREP="@EGREP@"
export AWK="@AWK@"

### Functions for use in the testsuite.

get_dev_and_fs_type()
{
	# Get, in as portable a way as possible, the device and filesystem type on which the
	# file passed in $1 resides.
	mount | $FGREP -w "`df \"$1\" | grep '%' | $SED -e 's/.*% *//'`"
}

uname_or_unknown()
{
	# If "uname" doesn't exist or it fails on the given param in $1, echo back "unknown".
	uname $1 2>/dev/null || echo "unknown";
}

get_system_info()
{
	# Collects and returns information regarding the test system.
	
	# Using uname.
	echo "";
	echo "START uname info.";
	# POSIX uname options.
	echo "kernel_uname_s: "`uname_or_unknown -s`"";
	echo "kernel_release_uname_r: "`uname_or_unknown -r`"";
	echo "kernel_version_uname_v: "`uname_or_unknown -v`"";
	echo "machine_uname_m: "`uname_or_unknown -m`"";
	# Non-POSIX uname options.
	echo "processor_uname_p: "`uname_or_unknown -p`"";
	echo "END uname info.";
	echo "";
	
	# Using sysctl.
	echo "";
	echo "START sysctl info.";
	if PROG_SYSCTL=$(which sysctl 2>/dev/null);
	then
		echo "# Found sysctl: PROG_SYSCTL=$PROG_SYSCTL";
		# For *BSD: hw.ncpu, kern.smp.cpus, hw.physmem, hw.usermem
		for NAME in hw.ncpu hw.physmem hw.usermem hw.activecpu hw.physicalcpu hw.logicalcpu hw.model hw.optional kern.smp.cpus kernel.osrelease kernel.ostype;
		do
			if SYSCTL_STDOUT=$($PROG_SYSCTL $NAME);
			then
				echo "$SYSCTL_STDOUT";
			else
				echo "${NAME}: none";
			fi;
		done;
	else
		echo "# No sysctl utility found.";
	fi
	echo "END sysctl info.";
	echo "";
	
	# Using lscpu.
	echo "";
	echo "START lscpu info.";
	if PROG_LSCPU=$(which lscpu 2>/dev/null);
	then
		echo "# Found lscpu: PROG_LSCPU=$PROG_LSCPU";
		$PROG_LSCPU 2>/dev/null || echo "ERROR: Could not run \"$PROG_LSCPU\".";
	else
		echo "# No lscpu found.";
	fi;
	echo "END lscpu info.";
	echo "";
	
	# Using cpuid.
	echo "";
	echo "START cpuid info.";
	cpuid 2>/dev/null || echo "ERROR: Could not run cpuid."
	echo "END cpuid info.";
	echo "";
	
	# Using cat /proc/cpuinfo.
	echo "";
	echo "START /proc/cpuinfo info.";
	cat /proc/cpuinfo 2>/dev/null || echo "ERROR: Could not cat /proc/cpuinfo."
	echo "END /proc/cpuinfo info.";
	echo "";
}

ASX_SCRIPT ()
{
	# Note: '\r' removal in here because script outputs \r\n's, even on Linuxes.
	case $PROG_SCRIPT_TYPE in
		linux) $PROG_SCRIPT $PROG_SCRIPT_PRE_TEXT "$*" $PROG_SCRIPT_POST_TEXT | tr -d '\r';;
		bsd) $PROG_SCRIPT $PROG_SCRIPT_PRE_TEXT "${@}" $PROG_SCRIPT_POST_TEXT | tr -d '\r';;
		*) exit 1;;
	esac
}



