# @configure_input@                                     -*- shell-script -*-
# atlocal.in for UniversalCodeGrep's ./tests directory, used to collect configure-time
# information about the build system.
#
# Copyright 2015-2016 Gary R. Van Sickle (grvs@users.sourceforge.net).
#
# This file is part of UniversalCodeGrep.
#
# UniversalCodeGrep is free software: you can redistribute it and/or modify it under the
# terms of version 3 of the GNU General Public License as published by the Free
# Software Foundation.
#
# UniversalCodeGrep is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# UniversalCodeGrep.  If not, see <http://www.gnu.org/licenses/>.

## Process this file with autoconf to produce atlocal.

# We need this so we're able to find the binary we built.
PATH=@abs_builddir@:@abs_top_builddir@/src:@abs_top_srcdir@/build-aux:$top_srcdir:$srcdir:$PATH

XFAILFILE=$abs_builddir/.badversion

trap "test -r $XFAILFILE && cat $XFAILFILE; exit $?" 1 2 13 15

export PROG_SCRIPT="@PROG_SCRIPT@"
export PROG_SCRIPT_TYPE="@PROG_SCRIPT_TYPE@"
export PROG_SCRIPT_PRE_TEXT="@PROG_SCRIPT_PRE_TEXT@"
export PROG_SCRIPT_POST_TEXT="@PROG_SCRIPT_POST_TEXT@"
export SED="@SED@"
export ESED="@ESED@"
export MKDIR_P="@MKDIR_P@"
export TEST_LN_S="@TEST_LN_S@"
export PROG_TIME="@PROG_TIME@"
export FGREP="@FGREP@"
export EGREP="@EGREP@"
export PROG_GREP_P="@PROG_GREP_P@"
export PROG_PCRE2GREP="@PROG_PCRE2GREP@"
export PROG_GNU_GREP="@PROG_GNU_GREP@"
export AWK="@AWK@"
export PYTHON="@PYTHON@"

# At testsuite-run-time, find the programs we wish to compare performance with.
PROGLIST=built_ucg:ucg
if PROG_INST_UCG="$(which ucg 2>/dev/null)";
then
	PROGLIST=$PROGLIST,inst_ucg:$PROG_INST_UCG
fi
if PROG_INST_AG="$(which ag 2>/dev/null)";
then
	PROGLIST=$PROGLIST,inst_ag:$PROG_INST_AG
fi
#if PROG_ACK="$(which ack)";
#then
#fi
if test -x "${PROG_PCRE2GREP}";
then
	PROGLIST=$PROGLIST,inst_pcre2grep:$PROG_PCRE2GREP
fi
PROGLIST=$PROGLIST,inst_system_grep:grep
if test -x "${PROG_GNU_GREP}";
then
	PROGLIST=$PROGLIST,inst_gnu_grep_e:$PROG_GNU_GREP
fi
if test -x "${PROG_GREP_P}";
then
	PROGLIST=$PROGLIST,inst_gnu_grep_p:$PROG_GREP_P
fi

### Functions for use in the testsuite.

get_dev_and_fs_type()
{
	# Get, in as portable a way as possible, the device and filesystem type on which the
	# file passed in $1 resides.
	mount | $FGREP -w "`df \"$1\" | grep '%' | $SED -e 's/.*% *//'`"
}

uname_or_unknown()
{
	# If "uname" doesn't exist or it fails on the given param in $1, echo back "unknown".
	uname $1 2>/dev/null || echo "unknown";
}

get_system_info()
{
	# Collects and returns information regarding the test system.
	
	# Distro, using /etc/os-release.
	# This is a file specified by freedesktop.  See https://www.freedesktop.org/software/systemd/man/os-release.html
	echo "";
	echo "START /etc/os-release info.";
	if [ -e /etc/os-release ];
	then
		cat /etc/os-release;
	fi
	echo "END /etc/os-release info.";
	echo "";
	
	# Distro, using  /usr/bin/sw_vers
	# This is for OSX.
	echo "";
	echo "START sw_vers info."
	if [ -x /usr/bin/sw_vers ];
	then
		sw_vers;
	fi
	echo "END sw_vers info."
	echo "";
	
	# Using uname.
	#
	# OSX: Note that on a VMWare box running on a Xeon, we get the following:
	# machine_uname_m: x86_64
	# processor_uname_p: i386
	#
	echo "";
	echo "START uname info.";
	# POSIX uname options.
	echo "kernel_uname_s: "`uname_or_unknown -s`"";
	echo "kernel_release_uname_r: "`uname_or_unknown -r`"";
	echo "kernel_version_uname_v: "`uname_or_unknown -v`"";
	echo "machine_uname_m: "`uname_or_unknown -m`"";
	# Non-POSIX uname options.
	echo "processor_uname_p: "`uname_or_unknown -p`"";
	echo "END uname info.";
	echo "";
	
	# Using sysctl.
	echo "";
	echo "START sysctl info.";
	if PROG_SYSCTL=$(which sysctl 2>/dev/null);
	then
		echo "# Found sysctl: PROG_SYSCTL=$PROG_SYSCTL";
		#
		# For *BSD:
		#   hw.ncpu, kern.smp.cpus, hw.physmem, hw.usermem
		#   kern.ostype: FreeBSD
		#   kern.version: FreeBSD 10.3-RELEASE-p5 #0: Thu Jun 30 03:52:15 UTC 2016
        #        root@amd64-builder.pcbsd.org:/usr/obj/usr/src/sys/GENERIC
		#
		# For OSX:
		#   hw.physicalcpu ==> Number of cores
		#   hw.logicalcpu ==> Number of cores * number of hyperthreads per core
		#   hw.packages ==> Number of physical CPU packages.
		#	machdep.cpu.vendor: ==> E.g. "GenuineIntel"
		#   machdep.cpu.brand_string: ==> E.g. "Intel(R) Xeon(R) CPU           X5570  @ 2.93GHz"
		#   machdep.cpu.features: ==> Space-separated list of CPU extensions.  E.g.:
		#		"FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE36 CLFSH DS MMX FXSR SSE SSE2 SS SSE3 MON SSSE3 CX16 SSE4.1 SSE4.2 x2APIC POPCNT VMM"
		#   machdep.cpu.extfeatures: ==> More CPU extensions.  E.g.:
		#		"SYSCALL XD EM64T LAHF RDTSCP TSCI"
		#
		for NAME in hw.ncpu hw.physmem hw.usermem \
		hw.activecpu hw.physicalcpu hw.logicalcpu hw.packages hw.model hw.optional kern.smp.cpus kernel.osrelease kernel.ostype \
		machdep.cpu.vendor machdep.cpu.brand_string machdep.cpu.features machdep.cpu.extfeatures;
		do
			if SYSCTL_STDOUT=$($PROG_SYSCTL $NAME);
			then
				echo "$SYSCTL_STDOUT";
			else
				echo "${NAME}: none";
			fi;
		done;
	else
		echo "# No sysctl utility found.";
	fi
	echo "END sysctl info.";
	echo "";
	
	# Using lscpu.
	echo "";
	echo "START lscpu info.";
	if PROG_LSCPU=$(which lscpu 2>/dev/null);
	then
		echo "# Found lscpu: PROG_LSCPU=$PROG_LSCPU";
		$PROG_LSCPU 2>/dev/null || echo "ERROR: Could not run \"$PROG_LSCPU\".";
	else
		echo "# No lscpu found.";
	fi;
	echo "END lscpu info.";
	echo "";
	
	# Using cpuid.
	echo "";
	echo "START cpuid info.";
	cpuid 2>/dev/null || echo "ERROR: Could not run cpuid."
	echo "END cpuid info.";
	echo "";
	
	# Using cat /proc/cpuinfo.
	echo "";
	echo "START /proc/cpuinfo info.";
	cat /proc/cpuinfo 2>/dev/null || echo "ERROR: Could not cat /proc/cpuinfo."
	echo "END /proc/cpuinfo info.";
	echo "";
	
	# Checking for specific virtualization environment.
	echo "";
	echo "START virtual environment info.";
	### See <https://www.freedesktop.org/software/systemd/man/systemd-detect-virt.html> for possible results.
	if PROG_SYSD_DETECT_VIRT=$(which systemd-detect-virt 2>/dev/null);
	then
		echo "systemd-detect-virt: $(systemd-detect-virt)";
	fi;
	echo "END virtual environment info.";
	echo "";
}

ASX_SCRIPT ()
{
	# Note: '\r' removal in here because script outputs \r\n's, even on Linuxes.
	# @note The BSD case here seems to work for our current purposes, but I suspect it may fail if
	#       we pass in args with nontrivial quoting or escapes.  E.g., if you './run -x -d' the "--[no]column tests",
	#       you'll see this:
	#         ../../tests/file_presentation.at:59: { ASX_SCRIPT ucg --noenv --cpp --nocolor --column 'do_something' ; } > stdout_tty
	#         + ASX_SCRIPT ucg --noenv --cpp --nocolor --column do_something
	#         + printf %s 'ucg --noenv --cpp --nocolor --column do_something'
	#         + tr -d '\r'
	#         + /usr/bin/script -q /dev/null /bin/sh -c 'stty raw && ucg --noenv --cpp --nocolor --column do_something'
	#       i.e. 'do_something' gets changed into an unquoted do_something.
	#
	case $PROG_SCRIPT_TYPE in
		linux) $PROG_SCRIPT $PROG_SCRIPT_PRE_TEXT "$(printf '%s' "${*}")" $PROG_SCRIPT_POST_TEXT | tr -d '\r';;
		bsd) $PROG_SCRIPT $PROG_SCRIPT_PRE_TEXT command eval "stty raw >/dev/null 2>&1 && $(printf '%s' "${*}")" $PROG_SCRIPT_POST_TEXT | tr -d '\r';;
		*) exit 1;;
	esac
}

# Pipe output through this to convert to an ASCII+Hex text representation.
# Useful for detecting differences in non-printing characters. 
# @note On some OSX systems (which detect as having a bsd-style 'script' utility), tests such as this:
#       AT_CHECK([{ ASX_SCRIPT ucg --noenv --cpp --nocolor --column 'do_something' ; } | $PROG_TOHEX > stdout_tty], [0], [stdout], [stderr])
#       will prefix stdout_tty with '^D<backspace><backspace>' (hex 5e  44  08  08).  Not clear why.  Until we figure that out, just
#       strip those chars with sed if they're there.
PROG_TOHEX='eval sed s/^\^D\x08\x08// | od -t ax1'

