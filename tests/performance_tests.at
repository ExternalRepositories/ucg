# performance_tests.at for UniversalCodeGrep
#
# Copyright 2015-2016 Gary R. Van Sickle (grvs@users.sourceforge.net).
#
# This file is part of UniversalCodeGrep.
#
# UniversalCodeGrep is free software: you can redistribute it and/or modify it under the
# terms of version 3 of the GNU General Public License as published by the Free
# Software Foundation.
#
# UniversalCodeGrep is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# UniversalCodeGrep.  If not, see <http://www.gnu.org/licenses/>.

m4_define([EXTRACT_AND_APPEND_TIME],[
		# $1 == program name.
		AS_ECHO_N(["| $1 | "]) >> $PERF_RESULTS_FILE;
		cat stderr | egrep "real[[[:space:]]]+" | $ESED 's/real[[[:space:]]]+(.*)/\1/' | tr -d '\n' >> $PERF_RESULTS_FILE;
		AS_ECHO_N(" | ") >> $PERF_RESULTS_FILE;
		cat stdout | LCT >> $PERF_RESULTS_FILE;
		AS_ECHO([" |"]) >> $PERF_RESULTS_FILE;
])

m4_define([PREP_ONE_PROG],[
# $1 == program name.
# $2 == search pattern.
AT_CHECK([$PROG_TIME $1 $2 ${BOOST_PATH}],
	0,
	ignore,
	ignore)
])

m4_define([TIME_ONE_PROG],[
# $1 == program name.
# $2 == search pattern.
# $3 == params
NOENV=$(if $(echo $1 | egrep -q 'ucg|ack'); then echo --noenv; else echo ""; fi)
PREP_ONE_PROG([$1 ${NOENV}], [$2], [$3])
AT_CHECK([$PROG_TIME $1 ${NOENV} $2 ${BOOST_PATH} $3],
	0,
	stdout,
	stderr,
	[],
	[
		EXTRACT_AND_APPEND_TIME([$1 ${NOENV}])
	])
])

###
### Start of the performance tests.
###
AT_BANNER([UniversalCodeGrep performance tests])

#
# Create the logfile.
#
AT_SETUP([Create report log file])
echo "ucg Performance Test Results" > $PERF_RESULTS_FILE
AT_CLEANUP

#
# Record some system info.
#
AT_SETUP([Recording system info])
AS_ECHO(["START SYSTEM INFO"]) >> $PERF_RESULTS_FILE
AT_CHECK([get_system_info >> $PERF_RESULTS_FILE], [0], [stdout], [stderr])
AS_ECHO(["END SYSTEM INFO"]) >> $PERF_RESULTS_FILE
AT_CLEANUP

#
# Get the versions of the programs we're comparing to.
#
AT_SETUP([Getting program versions])

# Loop through the programs we're comparing performance with.
for PROGNAME in $PERF_PROGRAMS_TO_COMPARE grep; do
	AS_ECHO([--]) >> $PERF_RESULTS_FILE
	AS_ECHO(["$PROGNAME --version:"]) >> $PERF_RESULTS_FILE
	AS_ECHO(["$($PROGNAME --version)"]) >> $PERF_RESULTS_FILE
	AS_ECHO([--]) >> $PERF_RESULTS_FILE
done;


AT_CLEANUP

###
### ucg vs. grep, 'BOOST.*HPP' on Boost source.
###
AT_SETUP([ucg vs. grep, 'BOOST.*HPP' on Boost source])

# Skip this test if we can't find the Boost source tree.
AT_SKIP_IF([test ! -d "${BOOST_PATH}"])

###
### Directories during test time.
### 
### AS_ECHO([Dirs: pwd=$(pwd) , srcdir=$srcdir , at_top_srcdir=$at_top_srcdir , top_srcdir=$top_srcdir , abs_builddir=$abs_builddir builddir=$builddir,$(realpath $builddir)]) >> $PERF_RESULTS_FILE
### 
### pwd=/<...>/UCGTopSrcDir/build/tests/testsuite.dir/39
### srcdir=../../../../tests <== This will get you to the srcdir of the test's *.at file at test run time.
### top_srcdir=../../../.. <== This will get you to the real top_srcdir relative to the test's CWD at test runtime.
### builddir=../.. <== This will get you to /<..>/UCGTopBuildDir/tests from the CWD at test runtime. 
### abs_builddir=/<...>/UCGTopSrcDir/build/tests
### at_top_srcdir=../..
### 

AS_ECHO(["START PERFTEST"]) >> $PERF_RESULTS_FILE

# Record info on the filesystem where the test data lies.
TEST_DATA_FS_INFO=`get_dev_and_fs_type "${BOOST_PATH}"`
AS_ECHO(["The test data \"${BOOST_PATH}\" is on filesystem $TEST_DATA_FS_INFO"]) >> $PERF_RESULTS_FILE

AT_CHECK([$AWK -f $srcdir/performance_test_gen.awk -- 'BOOST.*HPP' "${BOOST_PATH}" > ./cmdlines.txt], [0], [stdout], [stderr])

AT_CAPTURE_FILE([./cmdlines.txt])

AT_CHECK([$AWK -f $srcdir/performance_test_runner.awk -- ./cmdlines.txt $PERF_RESULTS_FILE "${BOOST_PATH}"], [0], [stdout-nolog], [stderr])

AS_ECHO(["END PERFTEST"]) >> $PERF_RESULTS_FILE

AT_CLEANUP


###
### ucg vs. grep, literal string on Boost source.
###
AT_SETUP([ucg vs. grep, literal string on Boost source])

# Skip this test if we can't find the Boost source tree.
AT_SKIP_IF([test ! -d "${BOOST_PATH}"])

AS_ECHO(["START PERFTEST"]) >> $PERF_RESULTS_FILE

# Record info on the filesystem where the test data lies.
TEST_DATA_FS_INFO=`get_dev_and_fs_type "${BOOST_PATH}"`
AS_ECHO(["The test data \"${BOOST_PATH}\" is on filesystem $TEST_DATA_FS_INFO"]) >> $PERF_RESULTS_FILE

AT_CHECK([$AWK -f $srcdir/performance_test_gen.awk -- "TEST_BOOST_NO_INTRINSIC_WCHAR_T" "${BOOST_PATH}" > ./cmdlines.txt], [0], [stdout], [stderr])

AT_CAPTURE_FILE([./cmdlines.txt])

AT_CHECK([$AWK -f $srcdir/performance_test_runner.awk -- ./cmdlines.txt $PERF_RESULTS_FILE "${BOOST_PATH}"], [0], [stdout-nolog], [stderr])

AS_ECHO(["END PERFTEST"]) >> $PERF_RESULTS_FILE

AT_CLEANUP


###
### ucg vs. grep, literal string on single ~500MB file.
###
AT_SETUP([ucg vs. grep, literal string on 500MB file, match at end])

AS_ECHO(["START PERFTEST"]) >> $PERF_RESULTS_FILE

# Generate the test file.
TEST_FILE_NAME=500MBLoremIpsum.cpp
AT_CHECK([${builddir}/dummy-file-gen -b 500000000 | fold -s > ${TEST_FILE_NAME}], [0], [stdout], [stderr])
AT_CHECK([cat stderr | $EGREP 'Number of bytes written:'], [0], [ignore], [ignore])
AT_CHECK([echo "TEST_BOOST_NO_INTRINSIC_WCHAR_T" >> ${TEST_FILE_NAME}], [0], [stdout], [stderr])

# Record info on the filesystem where the test data lies.
TEST_DATA_FS_INFO=`get_dev_and_fs_type "${TEST_FILE_NAME}"`
AS_ECHO(["The test data \"${TEST_FILE_NAME}\" is on filesystem $TEST_DATA_FS_INFO"]) >> $PERF_RESULTS_FILE

AT_CHECK([$AWK -f $srcdir/performance_test_gen.awk -- "TEST_BOOST_NO_INTRINSIC_WCHAR_T" "${TEST_FILE_NAME}" > ./cmdlines.txt], [0], [stdout], [stderr])

AT_CAPTURE_FILE([./cmdlines.txt])

AT_CHECK([$AWK -f $srcdir/performance_test_runner.awk -- ./cmdlines.txt $PERF_RESULTS_FILE "${TEST_FILE_NAME}"], [0], [stdout-nolog], [stderr])

AS_ECHO(["END PERFTEST"]) >> $PERF_RESULTS_FILE

AT_CLEANUP

#
# Search on literal string.
#
AT_SETUP([Boost: find all '#endif's])

# Skip this test if we can't find the Boost source tree.
AT_SKIP_IF([test ! -d "${BOOST_PATH}"])

AS_ECHO([""]) >> $PERF_RESULTS_FILE
AS_ECHO(["Perf Test Results: $at_desc"]) >> $PERF_RESULTS_FILE
AS_ECHO(["| Command | Time | Matching Lines |"]) >> $PERF_RESULTS_FILE;
AS_ECHO(["|---------|------|----------------|"]) >> $PERF_RESULTS_FILE;

# Loop through the programs we're comparing performance with.
for PROGNAME in $PERF_PROGRAMS_TO_COMPARE; do
	TIME_ONE_PROG(["${PROGNAME}"], ['#endif'])
done

AT_CLEANUP


#
# Search with regex 'BOOST.*HPP'
#
AT_SETUP([Boost: search with regex 'BOOST.*HPP'])

# Skip this test if we can't find the Boost source tree.
AT_SKIP_IF([test ! -d "${BOOST_PATH}"])

AS_ECHO([""]) >> $PERF_RESULTS_FILE
AS_ECHO(["Perf Test Results: $at_desc"]) >> $PERF_RESULTS_FILE

# Loop through the programs we're comparing performance with.
for PROGNAME in $PERF_PROGRAMS_TO_COMPARE; do
	TIME_ONE_PROG(["${PROGNAME}"], ['BOOST.*HPP'])
done

AT_CLEANUP


#
# Search with ignore of part of the dir tree.
#
AT_SETUP([Boost: search with --ignore-dir=doc])

# Skip this test if we can't find the Boost source tree.
AT_SKIP_IF([test ! -d "${BOOST_PATH}"])

AS_ECHO([""]) >> $PERF_RESULTS_FILE
AS_ECHO(["Perf Test Results: $at_desc"]) >> $PERF_RESULTS_FILE

# Loop through the programs we're comparing performance with.
for PROGNAME in $PERF_PROGRAMS_TO_COMPARE; do
	TIME_ONE_PROG(["${PROGNAME}"], ['#endif'], [--ignore-dir=doc])
done

AT_CLEANUP


