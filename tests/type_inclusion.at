# type_inclusion.at for UniversalCodeGrep
#
# Copyright 2015-2016 Gary R. Van Sickle (grvs@users.sourceforge.net).
#
# This file is part of UniversalCodeGrep.
#
# UniversalCodeGrep is free software: you can redistribute it and/or modify it under the
# terms of version 3 of the GNU General Public License as published by the Free
# Software Foundation.
#
# UniversalCodeGrep is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# UniversalCodeGrep.  If not, see <http://www.gnu.org/licenses/>.

AT_BANNER([UniversalCodeGrep type inclusion checks])

m4_define([UCG_CREATE_CPP_HTML_FILES], [
# The "cpp" data file.
AT_DATA([test_file.cpp], [Generated test file
ptr
inside-ptr-sentence
])

# The "HTML" data file.
AT_DATA([test_file.html],[Generated test file
something
ptr
ptr
ptr
another something
])
])

###
### --noenv and --type=
###
AT_SETUP(['--noenv' and '--type='])

# The project .ucgrc file.
AT_DATA([.ucgrc],[# Generated test project rc file.
--type=cpp
])

UCG_CREATE_CPP_HTML_FILES

# --noenv should give us 2+3=5 hits.
AT_CHECK([ucg '--noenv' 'ptr' | LCT],[0],[5],[stderr])

# No '--noenv' should give us 2 hits from the cpp file.
AT_CHECK([ucg --test-noenv-user 'ptr' | LCT],[0],[2],[stderr])

# Adding --type=html should again give us 2+3=5 hits.
AT_CHECK([ucg --test-noenv-user '--type=html' 'ptr' | LCT],[0],[5],[stderr])

# And adding --type=nocpp to that should give us the 3 hits in the html file.
AT_CHECK([ucg --test-noenv-user '--type=html' '--type=nocpp' ptr | LCT],[0],[3],[stderr])

AT_CLEANUP

###
### --ignore-file tests
###

AT_SETUP([--ignore-file tests])

UCG_CREATE_CPP_HTML_FILES

# Ignoring html should give us 2 hits.
AT_CHECK([ucg --noenv --ignore-file=ext:html 'ptr' | LCT],[0],[2],[stderr])

# Ignoring cpp should give us 3 hits.
AT_CHECK([ucg --noenv --ignore-file=ext:cpp 'ptr' | LCT],[0],[3],[stderr])

# Ignoring cpp and html should give us 0 hits.
AT_CHECK([ucg --noenv --ignore-file=ext:cpp --ignore-file=ext:html 'ptr' | LCT],[0],[0],[stderr])

# Ignoring cpp and html, then enabling --cpp and --html should give us 5 hits.
AT_CHECK([ucg --noenv --ignore-file=ext:cpp --ignore-file=ext:html --cpp --html 'ptr' | LCT],[0],[5],[stderr])

AT_CLEANUP


###
### ag-style --ignore=GLOB tests
### At the moment, ucg's --ignore only applies to files, while ag's applies to both files and directories.
### --ignore is an alias of --exclude, so we repeat the same tests with the different name.
###
AT_SETUP([--ignore=GLOB tests])

UCG_CREATE_CPP_HTML_FILES

# Ignoring xyz should give us 5 hits.
AT_CHECK([ucg --noenv --ignore='*.xyz' 'ptr' | LCT], [0], [5], [stderr])

# Ignoring cpp should give us 3 hits.
AT_CHECK([ucg --noenv --ignore='*.cpp' 'ptr' | LCT], [0], [3], [stderr])

# Ignoring cpp and html should give us 0 hits.
AT_CHECK([ucg --noenv --ignore='*.cpp' --exclude='*.html' 'ptr' | LCT], [0], [0], [stderr])

# Ignoring non-matching cpp and html globs should give us 5 hits.
AT_CHECK([ucg --noenv --ignore='wrong*.cpp' --ignore='different*.html' 'ptr' | LCT], [0], [5], [stderr])

AT_CLEANUP


###
### --exclude=GLOB tests
###
AT_SETUP([--exclude=GLOB tests])

UCG_CREATE_CPP_HTML_FILES

# Excluding xyz should give us 5 hits.
AT_CHECK([ucg --noenv --exclude='*.xyz' 'ptr' | LCT], [0], [5], [stderr])

# Excluding cpp should give us 3 hits.
AT_CHECK([ucg --noenv --exclude='*.cpp' 'ptr' | LCT], [0], [3], [stderr])

# Excluding cpp and html should give us 0 hits.
AT_CHECK([ucg --noenv --exclude='*.cpp' --exclude='*.html' 'ptr' | LCT], [0], [0], [stderr])

# Excluding non-matching cpp and html globs should give us 5 hits.
AT_CHECK([ucg --noenv --exclude='wrong*.cpp' --exclude='different*.html' 'ptr' | LCT], [0], [5], [stderr])

AT_CLEANUP


###
### --exclude=GLOB tests, expected fails
###
AT_SETUP([--exclude=GLOB tests, expected fails])
AT_XFAIL_IF(true)

UCG_CREATE_CPP_HTML_FILES

# Excluding cpp and html, then enabling --cpp and --html should ideally give us 5 hits.  However,
# due to the difficulty in merging arbitrary globs in with the file type mechanism, the glob disables take
# precedence, and we'll get no hits.
AT_CHECK([ucg --noenv --exclude='*.cpp' --exclude='*.html' --cpp --html 'ptr' | LCT], [0], [5], [stderr])

AT_CLEANUP


###
### --include=GLOB tests
###
AT_SETUP([--include=GLOB tests])

UCG_CREATE_CPP_HTML_FILES

# Including xyz should give us 0 hits.
AT_CHECK([ucg --noenv --include='*.xyz' 'ptr' | LCT], [0], [0], [stderr])

# Including cpp should give us 2 hits.
AT_CHECK([ucg --noenv --include='*.cpp' 'ptr' | LCT], [0], [2], [stderr])

# Including cpp and html should give us 5 hits.
AT_CHECK([ucg --noenv --include='*.cpp' --include='*.html' 'ptr' | LCT], [0], [5], [stderr])

# Including non-matching cpp and html globs should give us 0 hits.
AT_CHECK([ucg --noenv --include='wrong*.cpp' --include='different*.html' 'ptr' | LCT], [0], [0], [stderr])

AT_CLEANUP


###
### --include=GLOB tests, expected fails
###
AT_SETUP([--include=GLOB tests, expected fails])
AT_XFAIL_IF(true)

UCG_CREATE_CPP_HTML_FILES

# Including cpp and html, then disabling --nocpp and --nohtml should ideally give us 0 hits.  However,
# due to the difficulty in merging arbitrary globs in with the file type mechanism, the glob enables take
# precedence, and we'll get 5 hits.
AT_CHECK([ucg --noenv --include='*.cpp' --include='*.html' --nocpp --nohtml 'ptr' | LCT], [0], [0], [stderr])

AT_CLEANUP


###
### --include=GLOB/--exclude=GLOB tests
###
AT_SETUP([--include=GLOB/--exclude=GLOB tests])

UCG_CREATE_CPP_HTML_FILES

# Including and then excluding cpp should give us 0 hits.
AT_CHECK([ucg --noenv --include='*.cpp' --exclude='*.cpp' 'ptr' | LCT], [0], [0], [stderr])

# Including, excluding, and then including cpp again should give us 2 hits.
AT_CHECK([ucg --noenv --include='*.cpp' --exclude='*.cpp' --include='*.cpp' 'ptr' | LCT], [0], [2], [stderr])

# Including and then excluding cpp, then including html should give us 3 hits.
AT_CHECK([ucg --noenv --include='*.cpp' --exclude='*.cpp' --include='*.html' 'ptr' | LCT], [0], [3], [stderr])

AT_CLEANUP


###
### Overlapping file type specs.
###
AT_SETUP([Overlapping file type specs])

AT_DATA([test_file.cpp],[#include
])

AT_DATA([test_file.c],[#include
])

AT_DATA([test_file.h],[#include
])

# --type=cpp should give us 2 hits.
AT_CHECK([ucg --noenv --type=cpp 'include' | LCT],[0],[2],[stderr])

# --type=nohh should give us 2 hits.
AT_CHECK([ucg --noenv --type=nohh 'include' | LCT],[0],[2],[stderr])

# --type=cpp --type=nocc should give us 1 hit, in the .cpp file.
AT_CHECK([ucg --noenv --type=cpp --type=nocc 'include' | LCT],[0],[1],[stderr])

# --type=nocpp --type=cc should give us 2 hits, in the .c and .h files.
AT_CHECK([ucg --noenv --type=nocpp --type=cc 'include' | LCT],[0],[2],[stderr])

# --type=nocpp --type=nocc should give us 0 hits.
AT_CHECK([ucg --noenv --type=nocpp --type=nocc 'include' | LCT],[0],[0],[stderr])

# --type=nocpp --type=nocc --type=hh should give us 1 hit, the same as if we only specified --type=hh.
AT_CHECK([ucg --noenv --type=nocpp --type=nocc --type=hh 'include' | LCT],[0],[1],[stderr])

# No --type= param should give us 3 hits.
AT_CHECK([ucg --noenv 'include' | LCT],[0],[3],[stderr])

AT_CLEANUP


m4_define([UCG_CREATE_FILES],[
AT_DATA([test_file.xqz],[#include
])

AT_DATA([UserDefinedName],[#include
])

AT_DATA([test_file.7],[#include
])

AT_DATA([test_file.h],[#include
])
])

###
### User-defined file type specs.
###
AT_BANNER([UniversalCodeGrep user-defined file types checks])

#
AT_SETUP([No user specs])

UCG_CREATE_FILES

# No params should give us 1 hit in the .h file.
AT_CHECK([ucg --noenv 'include' | LCT],[0],[1],[stderr])

AT_CLEANUP

#
AT_SETUP([Two --type-sets, no --type])

UCG_CREATE_FILES

# Defining two new types, and not specifying a --type=TYPE, should give us 4 hits.
AT_CHECK([ucg --noenv --type-set=type1:ext:xqz,7 --type-set=type2:is:UserDefinedName 'include' | LCT],[0],[4],[stderr])

AT_CLEANUP

#
AT_SETUP([Two --type-sets, short-form enabling])

UCG_CREATE_FILES

# The short form "--TYPE" should work on the user defined types.
AT_CHECK([ucg --noenv --type-set=type1:ext:xqz,7 --type-set=type2:is:UserDefinedName --type1 'include' | LCT],[0],[2],[stderr])

AT_CLEANUP

#
AT_SETUP([Two --type-sets, short-form disabling])

UCG_CREATE_FILES

# The short form "--noTYPE" should work on the user defined types.  This should give us 2 hits, in the .h file and the UserDefinedName file.
AT_CHECK([ucg --noenv --type-set=type1:ext:xqz,7 --type-set=type2:is:UserDefinedName --notype1 'include' | LCT],[0],[2],[stderr])

AT_CLEANUP

#
AT_SETUP([--type-set followed by --type-add, short-form enabling])

UCG_CREATE_FILES

# "--type-add" should work on the user defined types.
AT_CHECK([ucg --noenv --type-set=type1:ext:xqz,7 --type-add=type1:is:UserDefinedName --type1 'include' | LCT],[0],[3],[stderr])

AT_CLEANUP

## Malformed file type specs
AT_SETUP([Invalid filter spec error handling])
AT_KEYWORDS([error_handling])

UCG_CREATE_FILES

AT_CHECK([ucg --noenv --type-add=fhqz 'include'],[255],[stdout],[stderr])
AT_CHECK([cat stderr | grep -E 'ucg: error: [[^I]]*Invalid filter specification .fhqz. while parsing option .--type-add=fhqz.'], [0], [ignore], [ignore])

AT_CLEANUP

#
AT_SETUP([Unknown filter type error handling])
AT_KEYWORDS([error_handling])

UCG_CREATE_FILES

AT_CHECK([ucg --noenv --type-add=fgh:lll:abc 'include'],[255],[stdout],[stderr])
AT_CHECK([cat stderr | grep -E 'ucg: error: [[^U]]*Unknown filter type .lll. [[^w]]*while parsing option .--type-add=fgh:lll:abc.'], [0], [ignore], [ignore])

AT_CLEANUP
