# Top-level Makefile.am for UniversalCodeGrep
#
# Copyright 2015-2016 Gary R. Van Sickle (grvs@users.sourceforge.net).
#
# This file is part of UniversalCodeGrep.
#
# UniversalCodeGrep is free software: you can redistribute it and/or modify it under the
# terms of version 3 of the GNU General Public License as published by the Free
# Software Foundation.
#
# UniversalCodeGrep is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# UniversalCodeGrep.  If not, see <http://www.gnu.org/licenses/>.

# Make sure autotools pick up the M4 macros in the ./m4 directory, and also copy
# any third-party macros (e.g. the system-wide ax_* Autoconf Macro Archive ones
# in /usr/share/aclocal) to ./m4 so they get distributed and automatically updated.
# Only useful in the top-level Makefile.am (see http://sources.redhat.com/automake/automake.html#Rebuilding).
ACLOCAL_AMFLAGS = -I m4 --install

# The subdirectories containing the source code, docs, and tests.
# Note: The code in src depends on the libraries in third_party, so make sure the latter is always listed before the former.
# Note that we can't list these other libraries in e.g. *_DEPENDENCIES because that replaces all Automake-generated dependencies.
SUBDIRS = third_party src . tests

# Set these *CLEANFILES Automake vars to empty, so that we can simply always append (+=) to them later.
CLEANFILES =
MOSTLYCLEANFILES =
DISTCLEANFILES =
MAINTAINERCLEANFILES =

# Make sure README.rd and other docs get distributed and installed correctly.
dist_doc_DATA = README.md NEWS.md COPYING AUTHORS

# Update libtool if it gets out of date.
libtool: $(LIBTOOL_DEPS)
	$(SHELL) ./config.status libtool

# The Automake rules for the ucg executable.
bin_PROGRAMS=ucg
ucg_SOURCES=main.cpp build_info.h
nodist_ucg_SOURCES=build_info.cpp
CLEANFILES+=build_info.cpp
ucg_CPPFLAGS = -I $(top_srcdir)/src $(AM_CPPFLAGS) 
ucg_CFLAGS = $(AM_CFLAGS)
ucg_CXXFLAGS = $(AM_CXXFLAGS)
ucg_LDFLAGS = $(AM_LDFLAGS)
ucg_LDADD = ./src/libsrc.la ./src/libext/libext.a ./src/future/libfuture.a ./src/libsrc_sse2.la \
    ./src/libsrc_sse4_2_no_popcnt.la ./src/libsrc_sse4_2_popcnt.la
###./src/libsrc_isa_ext_x86_64.la 
# ./src/libsrc.a
#./src/libsrc_sse2.a 

# Collect some make-time info. 
FORCE:
build_info.cpp: FORCE verify-provenance
	$(AM_V_GEN) rm "$@" || true;
	$(AM_V_GEN) rm "$@.tmp" || true;
	$(AM_V_GEN) echo "// Build information file." > "$@.tmp";\
	echo "// THIS FILE IS AUTOMATICALLY GENERATED BY THE TOP-LEVEL MAKEFILE, DO NOT EDIT" >> "$@.tmp";\
	echo "// VCS repo info (git describe / tarball)" >> "$@.tmp"; \
	if [ -f $(top_srcdir)/.tarball-version ]; then \
		: We are building from a tarball. ; \
		GIT_DESCRIBE=$$(cat $(top_srcdir)/.tarball-version); \
	elif (which git > /dev/null && cd $(top_srcdir) && git describe > /dev/null); then \
		: We are building from a git repo. ; \
		GIT_DESCRIBE="$$(cd $(top_srcdir) && git describe --long --dirty --always)"; \
	else GIT_DESCRIBE="unknown"; \
	fi; \
	echo "const char *g_git_describe = \"$${GIT_DESCRIBE}\";" >> "$@.tmp"; \
	echo "// CXX" >> "$@.tmp";\
	echo "const char *g_cxx = \"$(CXX)\";" >> "$@.tmp";
# This is known to work for g++ and clang++.
	$(AM_V_GEN) CXX_VERSION_STR=$$(if $$($(CXX) --version > /dev/null); then echo "$$($(CXX) --version | $(ESED) '/^Configured.*$$/d;' | head -n 1)"; else echo "unknown"; fi;); \
	echo "const char *g_cxx_version_str = \"$${CXX_VERSION_STR}\";" >> "$@.tmp";\
	mv "$@.tmp" "$@"

# Make sure we're either trying to build from a git repo or a tarball, and not in some weird state.
verify-provenance:
	@if [ -d "$(top_srcdir)/.git" -a -f "$(top_srcdir)/.tarball-version" ]; \
	then \
		echo "ERROR: The top-level source directory, \"$(top_srcdir)\", appears to be in an"; \
		echo "inconsistent state: it looks like both an extracted tarball and a .git repo."; \
		echo "Removing the file \"$(top_srcdir)/.tarball-version\" will allow it to build."; \
		exit 1; \
	fi;

	
# Doxygen rules
@DX_RULES@
MOSTLYCLEANFILES+=$(DX_CLEANFILES)


## ------------- ##
## Distribution. ##
## ------------- ##

# .tarball-version should only ever exist in a distribution tarball.
dist-hook:
	echo -n "$$(cd $(top_srcdir) && git describe --long --dirty | tr -d '\r\n')-tarball"  > "$(distdir)/.tarball-version"
